"""updated user model

Revision ID: 0fc8a32f9d7f
Revises: 0aa089892da6
Create Date: 2025-05-20 01:42:49.584941

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '0fc8a32f9d7f'
down_revision = '0aa089892da6'
branch_labels = None
depends_on = None

# +++ Define your new ENUM type here for reusability +++
gender_enum_type_new = sa.Enum('MALE', 'FEMALE', 'OTHER', 'PREFER_NOT_TO_SAY', name='genderenum')
# +++ Define your OLD ENUM type here for reusability in downgrade +++
# You might need to adjust the values if 'visibilityenum' had different string values in the DB
visibility_enum_type_old = postgresql.ENUM('PUBLIC', 'FRIENDS', 'PRIVATE', name='visibilityenum')


def upgrade():
    # ### commands auto generated by Alembic - START ###

    # +++ Create the new PostgreSQL ENUM type FIRST +++
    gender_enum_type_new.create(op.get_bind(), checkfirst=True)

    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.add_column(sa.Column('first_name', sa.String(length=64), nullable=False))
        batch_op.add_column(sa.Column('last_name', sa.String(length=64), nullable=False))
        batch_op.alter_column('date_birth',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.Date(),
               existing_nullable=False)
        batch_op.alter_column('gender',
               existing_type=visibility_enum_type_old, # Use the defined old type
               type_=gender_enum_type_new,             # Use the defined new type
               existing_nullable=False,
               # +++ Add postgresql_using for casting +++
               # This assumes existing values in 'gender' column can be cast to text
               # and then to the new 'genderenum'.
               # If existing values are not in ('MALE', 'FEMALE', 'OTHER', 'PREFER_NOT_TO_SAY'),
               # this cast will fail. You might need to handle data migration separately
               # or ensure existing data is compatible or nullable during transition.
               postgresql_using='gender::text::genderenum')

        batch_op.drop_column('firstname') # Make sure these columns actually existed with these names
        batch_op.drop_column('lastname')  # And are not the ones you just added with underscores

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - START ###
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.add_column(sa.Column('lastname', sa.VARCHAR(length=64), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('firstname', sa.VARCHAR(length=64), autoincrement=False, nullable=False))
        batch_op.alter_column('gender',
               existing_type=gender_enum_type_new, # Use the defined new type
               type_=visibility_enum_type_old,     # Use the defined old type
               existing_nullable=False,
               # +++ Add postgresql_using for casting back if needed +++
               # This assumes values in 'genderenum' can be cast back to text
               # that matches 'visibilityenum' values.
               postgresql_using='gender::text::visibilityenum')
        batch_op.alter_column('date_birth',
               existing_type=sa.Date(),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
        batch_op.drop_column('last_name')
        batch_op.drop_column('first_name')

    # +++ Drop the PostgreSQL ENUM type LAST in downgrade +++
    gender_enum_type_new.drop(op.get_bind(), checkfirst=True)

    # ### end Alembic commands ###